package com.akros.construction.service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;

import com.akros.construction.model.Project;
import com.akros.construction.model.ProjectFile;
import com.akros.construction.repository.ProjectFileRepository;

@Service
@Transactional
public class FileService {
    private final ProjectFileRepository projectFileRepository;
    private final ProjectService projectService;

    @Autowired
    public FileService(ProjectFileRepository projectFileRepository, ProjectService projectService) {
        this.projectFileRepository = projectFileRepository;
        this.projectService = projectService;
    }

    public ProjectFile uploadFile(Long projectId, String filePath, String author, String discipline) throws IOException {
        // Validate project exists
        Project project = projectService.getProject(projectId);
        
        // Read file content
        File file = new File(filePath);
        if (!file.exists()) {
            throw new IOException("File not found: " + filePath);
        }
        
        byte[] content = Files.readAllBytes(file.toPath());
        String fileName = file.getName();
        String format = detectFileFormat(fileName);
        Long fileSize = file.length();
        
        // Create and save project file
        ProjectFile projectFile = new ProjectFile(project, fileName, fileName, format, author, discipline, fileSize, content);
        return projectFileRepository.save(projectFile);
    }

    private String detectFileFormat(String fileName) {
        String extension = fileName.toLowerCase();
        if (extension.endsWith(".pdf")) {
            return "PDF";
        } else if (extension.endsWith(".dwg")) {
            return "DWG";
        } else if (extension.endsWith(".dxf")) {
            return "DXF";
        } else {
            throw new IllegalArgumentException("Unsupported file format. Supported formats: PDF, DWG, DXF");
        }
    }

    public List<ProjectFile> getProjectFiles(Long projectId) {
        return projectFileRepository.findByProjectId(projectId);
    }

    public List<ProjectFile> getProjectFilesByFormat(Long projectId, String format) {
        return projectFileRepository.findByProjectIdAndFormat(projectId, format);
    }

    public ProjectFile getProjectFile(Long fileId) {
        return projectFileRepository.findById(fileId)
                .orElseThrow(() -> new RuntimeException("File not found with id: " + fileId));
    }

    public void deleteProjectFile(Long fileId) {
        projectFileRepository.deleteById(fileId);
    }
} 